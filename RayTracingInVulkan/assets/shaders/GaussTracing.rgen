#version 460
#extension GL_ARB_gpu_shader_int64 : require
#extension GL_ARB_shader_clock : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_tracing : require
// #extension GL_EXT_debug_printf : enable

#include "Gauss.glsl"
#include "Random.glsl"
#include "RayPayload.glsl"
#include "UniformBufferObject.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT Scene;
layout(binding = 2, rgba8) uniform image2D OutputImage;
layout(binding = 3) readonly uniform UniformBufferObjectStruct { UniformBufferObject Camera; };
layout(binding = 13) buffer NextKBuffer { SplatInfo[][8] NextK; };
layout(binding = 14) buffer RayInfoBuffer { RayInfo[] Rays; };

layout(location = 0) rayPayloadEXT RayPayload Ray;


void main() 
{
	const uint64_t clock = Camera.ShowHeatmap ? clockARB() : 0;

    const vec2 pixel = vec2(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y);
    const int ray_id = int(pixel.x) + int(pixel.y) * 16;

	// Initialize Ray
    Rays[ray_id].Depth = 0.0;
    Ray.Trans = 1.0;

	vec3 pixelColor = vec3(0);
	
	// Accumulate all the rays for this pixels.
	for (uint s = 0; s < Camera.NumberOfSamples; ++s)
	{
		//if (Camera.NumberOfSamples != Camera.TotalNumberOfSamples) break;
		const vec2 uv = (pixel / gl_LaunchSizeEXT.xy) * 2.0 - 1.0;

		vec4 origin = Camera.ModelViewInverse * vec4(0, 0, 0, 1);
		vec4 target = Camera.ProjectionInverse * (vec4(uv.x, uv.y, 1, 1));
		vec4 direction = Camera.ModelViewInverse * vec4(normalize(target.xyz * Camera.FocusDistance - vec3(0, 0, 0)), 0);
		vec3 rayColor = vec3(1);

		// Stop RayTrace when terminated
		for (uint b = 0; b <= Camera.NumberOfBounces; ++b)
		{
			// Marching Distance
			const float tMin = 0.001;
			const float tMax = 10000.0;

            // Per iterate initialization
            Rays[ray_id].GaussNum = 0;
            for (int i = 0; i < 8; i++) {
                NextK[ray_id][i].depth = 10000.0;
			}

			traceRayEXT(
				Scene, gl_RayFlagsOpaqueEXT, 0xff, 
				0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, 
				origin.xyz, tMin, direction.xyz, tMax, 0 /*payload*/);
			
            bool MissGauss = Rays[ray_id].GaussNum == 0;
            bool Terminated = false; // Ray.Trans < 0.001;

			// Gauss missed, or end of trace.
			if (MissGauss || Terminated) { break; }

			// [Optional] Update the origin
			// origin = origin + t * direction;
		}
	}

    imageStore(OutputImage, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 0));
}
